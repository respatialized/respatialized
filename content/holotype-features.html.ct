<%(def metadata {:title "HOLOTYPE: blueprint"})%>
<%(require (quote [flatland.ordered.map :refer [ordered-map]]))%>

<%=(header {:level :h1 :date "2021-02-11"} (:title metadata))%>

Holotype will eventually become a library, distributable as an artifact separate from the context of its original creation. This page serves as a blueprint for that library.

<%=(blockquote
 {:source "Suffering-oriented programming"
  :url "http://nathanmarz.com/blog/suffering-oriented-programming.html"
  :author "Nathan Marz"}
    "First make it possible. Then make it beautiful. Then make it fast.")%>

Following Marz's advice, there will be three major phases of the work needed to make <%= (in-code "holotype")%> a reality.

<%=(header {:level :h3} "Possible")%>

Because <%= (in-code "holotype")%> exists mostly as idiosyncratic site generation code, I still need to make it <%= (em "possible") %> to use outside of the context of this website. As Marz suggests, I am still feeling out the problem space in the context of a working prototype based on concrete examples.

<%(def features
       (ordered-map "Preliminary API"
       {:milestone "Possible"
       :status "Planned"
       :description "A first pass at a public API for the post helper functions"}
        "Generative testing"
       {:milestone "Possible"
        :status "Partially implemented"
         :description "Leverage the HTML spec for high-performance testing"}
        "Database"
        {:milestone "Possible"
       :description "Store post contents in a database"}
       "Schema"
       {:milestone "Possible"
        :status "Partially implemented"
       :description "Spec for HTML elements and for database entries"}
       "Code cleanup"
       {:milestone "Possible"
        :description "Remove references to old branches, experimental code, and other extraneous aspects of the codebase"}
       "Error handling"
       {:milestone "Possible"
       :description "Surface parse/render errors in terminal and REPL"}
       "Configurable defaults"
       {:milestone "Possible"
        :description "Override default template definitions + file extensions"}
       "Immediate rerenders"
       {:milestone "Beautiful"
        :description "Refresh rerendered page content without manual browser reload"}
        "Stable API"
        {:description "A stable API for post helpers and for programmatic interaction with parsing and rendering capabilities"
       :milestone "Beautiful"}
       "Autodocumentation"
       {:description "HTML for holotype generated by holotype"
       :milestone "Beautiful"}
       "CLI / TUI"
       {:description "Terminal commands for invocation and inpsection of builds"
       :milestone "Beautiful"}
       "Data-driven styling"
       {:description "Constraint-based generation of CSS values"
       :milestone "Beautiful"}
       "Live Validation"
       {:description "Incorporate schema definitions into error handling logic for real-time validation of HTML spec"
       :milestone "Beautiful"}
       "Async processing"
       {:milestone "Fast"
       :description "Asynchronous parsing + rendering"}
       "On-disk cache"
       {:milestone "Fast"
       :description "Persist parsed contents on disk for fast rebuilds"}
        ))%>

As an example of following Marz's lead in building up the prototype in the context of concrete use cases, I generated the table below from an ordered map of features defined inline:

<%= [:details

    [:summary "Table source map"]
    (code {:class "language-clojure"} (with-out-str (clojure.pprint/pprint features)))] %>
<%= [:details [:summary (in-code "respatialized.render/map->table")] (include-def (quote map->table) "./src/respatialized/render.clj")] %>

I didn't have that function before I wrote this post. Rather than writing a general-purpose 'table' function from scratch, I allowed the shape of the data that made the most sense at the time of writing to guide the implementation. A lot of this phase will consist of work like that: specific solutions that serve as data points for a new series of abstractions that unify the design.

<%=(header {:level :h3} "Beautiful")%>

In this phase, API stability will allow for new features to be built on a stable foundation while maintaining extensibility. I consider it an important goal that the <%=(in-code "holotype")%> code be usable as a <%=(em "library")%>, not as an opinionated and auto-configuring <%=(em "framework")%>, which is what I hope a disciplined approach to API design will allow.

<%=(header {:level :h3} "Fast")%>

This phase will focus on improving the responsiveness of interactions with the library. Due to the importance of real-time feedback for users of the library, latency is to be prioritized over throughput.

<%=(header {:level :h3} "Table of features")%>

<%= (map->table features :milestone) %>

<%=(header {:level :h3} "Features In Detail")%>

<%=(header {:level :h4} "Error handling")%>

Holotype features a parse and evaluate method that allows errors to be surfaced directly, in context. Here's an example:

<%=((invalid-fn :input)%>

The error message encountered during the parse/eval step gets surfaced where the original source expression was in the page, allowing a user to quickly identify the cause and fix it. Particularly useful when paired with live page refreshing.
