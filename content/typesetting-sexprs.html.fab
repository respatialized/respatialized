✳ (ns respatialized.writing.typesetting-sexprs
  (:require [garden.core :as garden :refer [style css]]
            [garden.selectors :as select]
            [site.fabricate.prototype.page :as page]
            [rewrite-clj.parser :as p]
            [rewrite-clj.node :as n]
            [respatialized.css :as site-css])
  ) 🔚
  

✳(def metadata
  {:title "Typesetting S-Expressions with CSS"
   :page-style
   (css
    [:article [:ul [:li {:grid-column "1 / span 4"}]]]
    [:.keyword {:color (site-css/oklch-hex-conversions "ochre")}]
    [:.language-clojure
     {:font-family "'Chivo Mono', monospace"
      :font-variant-ligatures "none"}]
    [:.grid-aligned-map
     #_[:.whitespace :.comma 
        :.open-brace :.close-brace {:display "none"}]
     [(select/nth-child 2) {:grid-column-start 1}]
     {:display "grid"
      :grid-template-columns "repeat(2,minmax(3px, 1fr))"}
     ]
    [:.map-flex
     {:display "flex"
      :grid-column "1 / 6"
      :column-gap "max(4px, 0.5em)"
      :flex-direction "row"
      :flex-wrap "wrap"
      ;;:min-width 0
      :justify-content "start"
      :font-variant-ligatures "none"}
     [:.whitespace {:display "none"
                    :width 0
                    :column-gap 0}]
     [:.comma {:column-gap 0}]]
    [:.map-flex-basis
     {:display "flex"
      :grid-column "1 / 6"
      :column-gap "max(4px, 0.25em)"
      :flex-direction "row"
      :flex-wrap "wrap"
      ;;:min-width 0
      :justify-content "start"}
     [:.language-clojure {:flex "1 1 40%"}]
     [:.map {:display "flex"
             :column-gap "max(4px, 0.25em)"
             ;;:flex-wrap "wrap"
             :flex-grow "1"}
      [:.language-clojure {:flex "1 1 40%"}]]
     [:.whitespace {:display "none"
                    :width 0
                    :column-gap 0}]
     [:.comma {:column-gap 0
               :display "none"
               :flex-basis 0}]
     [:.open-brace :.close-brace {:flex "0 0.1 auto"}]
     [:.close-brace {:align-self "flex-end"
                     :flex "0 0.1 auto"}]]
    [:.map-flex-contents
     {:display "flex"
      :grid-column "1 / 6"
      :column-gap "max(4px, 0.25em)"
      :flex "0.3 4 content"
      :flex-direction "row"
      :flex-wrap "wrap"
      ;;:min-width 0
      :justify-content "start"}
     [:.language-clojure {:flex "1 2 40%"}]
     [:.contents
      {:display "flex"
       :column-gap "max(4px, 0.75em)"
       :flex-wrap "wrap"}
      #_  [:.language-clojure {:flex "0.1 2 40%"}]]
     [:.map {:flex "5 0.1 fit-content"}
      [:.string {:flex-basis "fit-content"}]]
     [:.whitespace {#_ #_ :display "none"
                    :flex "0 0 0 !important"
                    ;;:padding-left "min(-4px, -0.75em)"
                    ;;:padding-right "min(-4px, -0.75em)"
                    :margin-left "min(-4px, -0.75em)"
                    ;;:margin-right "min(-4px, -0.75em)"
                    :width 0
                    :column-gap 0}]
     [:.comma {:column-gap 0
               :display "none"
               :flex-basis 0}]
     [:.open-brace :.close-brace {:flex "0 0.1 auto"
                                  :column-gap "max(4px, 0.25em)"}]
     [:.close-brace {:align-self "flex-end"}]]
    )}) 🔚
    
✳= [:h1 (:title metadata)] 🔚

✳=[:strong "Problem statement"] 🔚 CSS is a very powerful library for styling and laying out page elements, but almost no extant HTML-based syntax highlighting tools for Clojure take full advantage of it. Instead, most people opt for code-based syntax highlighters (or no syntax highlighting at all).


✳=[:strong "Assumptions"] 🔚
✳=[:ul {:style (style {:grid-column "1 / span 4"})}
 [:li "The structural and sequential nature of Lisp expressions means they more readily lend themselves to CSS selectors than the code of other programming languages."]
 [:li "Server side rendering with rewrite-clj means that all of the relevant syntax and semantics of Clojure code can be preserved via appropriate HTML classes."]
 [:li "Whitespace conveys no information in Clojure, so good formatting can be achieved without requiring 1:1 preservation of whitespace in the original source code."]
 [:li "Relaxing the requirement to exactly preserve whitespace will allow for more responsive and flexible display of Clojure source code based on viewport size."]
 ] 🔚
 
✳=[:strong "Goals"] 🔚

I believe that Clojure source code deserves beautiful syntax highlighting that leverages the full power of modern CSS.
✳= [:ul [:li "Text should be directly copyable from a HTML page to a source file or buffer."]
  [:li "CSS rules should be compatible with responsive layouts."]] 🔚
  
✳=[:strong "Prior art"] 🔚

Several bloggers in the Haskell community do a very good job of presenting source code as a coherent part of an overall document. ✳=[:a {:href "https://chrisdone.com/posts/fast-haskell-c-parsing-xml/"} "Chris Done"] 🔚 and  ✳=[:a {:href "https://wickstrom.tech/"} "Oskar Wickström"] 🔚 both have excellent blogs.

Wickström's  ✳=[:a {:href "https://wickstrom.tech/programming/2021/05/03/specifying-state-machines-with-temporal-logic.html"} "blending of diagrams, code, and prose"] 🔚 to illustrate technical concepts is one of the points of inspiration for Fabricate, the static website generator I wrote and used to generate these examples.

Nikita Prokopov has proposed a simple, future-proof method of indenting Clojure source code that I believe can be adapted to CSS.

✳=[:figure
 [:blockquote "I propose two simple unconditioned formatting rules:"
  [:ul [:li "Multi-line lists that start with a symbol are always indented with two spaces,"]
   [:li "Other multi-line lists, vectors, maps and sets are aligned with the first element (1 or 2 spaces)."]]
  [:em "Note: rules was updated to address an issue with Parinfer and multi-arity fns indentation, as many people has pointed out."]
  [:p "Basically, these examples will “simply work”, with no form-specific rules or any exceptions:"]
  [:pre [:code {:class "language-clojure"}]
   "(when something
  body)

(defn f [x]
  body)
  
(defn f
  [x]
  body)
  
(defn many-args [a b c
                 d e f]
  body)
  
(defn multi-arity
  ([x]
   body)
  ([x y]
   body))

(let [x 1
      y 2]
  body)
  
[1 2 3
 4 5 6]

{:key-1 v1
 :key-2 v2}
 
#{a b c
  d e f}"]]
 [:a {:href "https://tonsky.me/blog/clojurefmt/"}]] 🔚
 
CSS can do better than "add two spaces here", a constraint that exists due to the limitations of plaintext. However, it is a useful starting point when thinking about how to lay out nested Clojure forms.


The multimethod-based generation of Hiccup elements from rewrite-clj nodes was adapted and extended from Michiel Borkent's ✳=[:a {:href "https://github.com/borkdude/quickblog"} "quickblog"] 🔚; he helpfully describes the approach in  ✳=[:a {:href "https://blog.michielborkent.nl/writing-clojure-highlighter.html"} "Writing a Clojure highlighter from scratch."] 🔚 I believe that only tools that can leverage the full structure of Clojure's source code are appropriate to the task of generating effective documentation of Clojure code.

This page will have notes on several experiments in using CSS layout features for the display of Clojure expressions. Readers are strongly encouraged to use their web browser's inspector mode to see the hierarchy of elements and CSS rules used to generate these layouts.

✳= [:h2 "aligning map elements to CSS grid"] 🔚

This page already uses CSS grid for its layout, so one starting point would be to just align the elements representing the map contents to the main grid.

✳=
(update-in
 (page/expr->hiccup
  {:a/key "value"
   :attributeName "stroke-dashoffset"
   :values "0;2000"
   :some/key "some other value"
   :additive "sum"
   :dur "360s"
   :repeatCount "indefinite"}
  ) [1 :class]  #(str % " grid-aligned-map"))
🔚

Problems with this approach:
✳= [:ul
  [:li "whitespace and commas are treated as grid elements unless there's a way to get the grid to ignore them; the " [:a {:href "https://stackoverflow.com/a/32380418"} [:code "nth-child"]" selector will not skip elements set to " [:code "display: none;"]]]
  [:li "lack of support for CSS subgrid means that nested maps will be difficult to align"]]
🔚

✳= [:h2 "laying map elements out with flexbox: basic example"] 🔚

✳=

(update-in
 (page/expr->hiccup
  {:a/key "value"
   :attributeName "stroke-dashoffset"
   :values "0;2000"
   :some/key "some other value"
   :additive "sum"
   :dur "360s"
   :repeatCount "indefinite"}
  ) [1 :class]  #(str % " map-flex"))
🔚

It appears to be easier to fully hide insignificant elements with Flexbox than grid, but it may be harder to align keys to a left baseline. Inserting line breaks for each key may also be more difficult than with grid.

✳= [:h2 "A manually constructed example of grid layout for a map"] 🔚

This example uses nested flexboxes create an aligned container for the map contents and manually inserted ✳=[:a {:href "https://graffino.com/til/D0xjf7VIGi-how-to-force-a-flexbox-item-to-a-new-row"} "zero-height elements"] 🔚 before each new map key to force line breaks within the flexbox at the appropriate places.

✳=
[:span {:class "language-clojure map"
        :style (style {:grid-column "1 / span 4"
                       :display "flex"
                       :font-family "'Chivo Mono', monospace"
                       :flex-wrap "wrap"
                       :flex-direction "row"})}
 [:span {:class "language-clojure open-brace"} "{"]
 [:span {:class "language-clojure map-contents"
         :style (style {:display "flex"
                        :width "50ch"
                        :flex-wrap "wrap"})}
  [:span {:class "language-clojure keyword"} ":a/key"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;value&quot;"]
  [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:style (style {:flex-basis "100%" :height 0})}]
  [:span {:class "language-clojure keyword"} ":attributeName"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;stroke-dashoffset&quot;"]
  [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:style (style {:flex-basis "100%" :height 0})}]
  [:span {:class "language-clojure keyword"} ":values"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;0;2000&quot;"]
  [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:style (style {:flex-basis "100%" :height 0})}]
  [:span {:class "language-clojure keyword"} ":some/key"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;some other value&quot;"]
  [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:style (style {:flex-basis "100%" :height 0})}]
  [:span {:class "language-clojure keyword"} ":additive"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;sum&quot;"]
  [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:style (style {:flex-basis "100%" :height 0})}]
  [:span {:class "language-clojure keyword"} ":dur"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;360s&quot;"]
  [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:style (style {:flex-basis "100%" :height 0})}]
  [:span {:class "language-clojure keyword"} ":repeatCount"]
  [:span {:class "language-clojure whitespace"} " "]
  [:span {:class "language-clojure string"} "&quot;indefinite&quot;"]]
 [:span {:class "language-clojure close-brace"
         :style (style {:align-self "end"})} "}"]]
🔚

✳=[:strong "Problems:"] 🔚 the flex-basis 100% elements prevents flex-shrink from sizing the map down to an appropriate size. It similarly will also cause problems with flex-wrap: wrap on the top-level flexbox unless the nested flexbox for the map elements has a manually constrained size (this example does).

But overall this has the right look. The keys are aligned, the text is still wholly copyable into a plaintext buffer, and it flows nicely with the typographic baseline established by the main text.

The challenge is generating this type of layout programatically from rewrite-clj nodes, and doing so in a way that doesn't generate absurd layouts when displaying potentially nested maps.

✳= [:h2 "Another example with manually &ltspan&gted key/value pairs"] 🔚

Because the elements are being generated by rewrite-clj, one possible option would be to process them in a way that groups together key/value pairs. Here is a manual example that shows taking advantage of Flexbox layout to distribute these pairs in the space provided by the map contents element.

✳=
[:pre {:style (style {:grid-column "1 / span 4"
                      :margin-top "0em"})}
 [:span {:class "language-clojure map"
         :style (style {
                        :display "flex"
                        ;;:flex-wrap "wrap"
                        :flex-direction "row"})}
  [:span {:class "language-clojure open-brace"} "{"]
  [:span {:class "language-clojure map-contents"
          :style (style {:display "flex"
                         :max-width "60ch"
                         :column-gap "max(4px, 0.5em)"
                         :justify-content "flex-start"
                         :flex-wrap "wrap"})}
   [:span {:class "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":a/key"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;value&quot;"]
    [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span {:clas "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":attributeName"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;stroke-dashoffset&quot;"]
    [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span {:class "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":values"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;0;2000&quot;"]
    [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span {:class "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":some/key"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;some other value&quot;"]
    [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span {:class "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":additive"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;sum&quot;"]
    [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span {:class "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":dur"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;360s&quot;"]
    [:span {:class "language-clojure comma"} [:span {:class "language-clojure comma"} ","]]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span {:class "language-clojure keyval"}
    [:span {:class "language-clojure keyword"} ":repeatCount"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure string"} "&quot;indefinite&quot;"]]]
  [:span {:class "language-clojure close-brace"
          :style (style {:align-self "end"})} "}"]]]
🔚

This also looks appealing, ensuring a decent visual separation between the map elements while preventing keys and values from being split across a linebreak, which helps with visual comprehension of the map. Given that it does not require inserting elements or pseudo-elements that emulate a line break, it may be both much more robust and easier to implement than any solution that involves the insertion of invisible elements to manipulate flexbox rules.


✳= [:h2 "laying map elements out with flexbox: controlling layout with flex-basis"] 🔚

✳=
(update-in
 (page/expr->hiccup
  {:a/key "value"
   :attributeName "stroke-dashoffset"
   :values "0;2000"
   :some/key "some other value"
   :additive "sum"
   :nested/map {:a 2 :b 3}
   #_ :uneval/key #_ :uneval/value
   :nested/map.2 {"a longer key" "with a correspondingly longer value"
                  :longer.key/two "another longer value to take up more flexbox space" }
   :dur "360s"
   :repeatCount "indefinite"}
  ) [1 :class]  #(str % " map-flex-basis"))
🔚

At first glance, this is pretty close to optimal. Setting flex-basis to 40% or so generates a layout with aligned columns. However, the layout gets trickier with nested maps. Flex-grow and flex-shrink might be the right way to do it; I just need to make sure the rules can apply at an arbitrary level of nesting.

✳= [:h2 "Using " [:code "fabricate"] "'s multimethods to separate sequence contents from enclosing braces"]  🔚
In order to dynamically rebind a multimethod, the body of it should be bound to a function assigned to a dynamic var.

✳+ (defn ^:dynamic node->map [node]
    (apply #'page/span "map" (#'page/span "open-brace" "{")
           (conj (mapv #'page/node->hiccup (:children node))
                 (#'page/span "close-brace" "}")))) 🔚

           
✳+ (defmethod page/node->hiccup :map [node]
    (node->map node))  🔚
    
✳+ (defn node->map-contents [node]
    (apply #'page/span "map map-flex-contents"
           (#'page/span "open-brace" "{")
           [(reduce conj (#'page/span "contents")
                    (mapv page/node->hiccup (:children node)))
            (#'page/span "close-brace" "}")])) 🔚   
            
✳= [:h2 "Using a new node->hiccup conversion to set map contents apart from opening and closing braces"] 🔚

Separating enclosing elements from the contents of a collection is probably a worthwhile idea regardless of the collection type. Here's how it might look in the context of a nested map.

✳= (binding [node->map node->map-contents]
   [:pre {:style (style {:grid-column "1 / span 4"})}
    (page/expr->hiccup
     {:a/key "value"
      :attributeName "stroke-dashoffset"
      :values "0;2000"
      :some/key "some other value"
      :additive "sum"
      :nested/map {:a 2 :b 3}
      #_ :uneval/key #_ :uneval/value
      :nested/map.2 {"a longer key" "with a correspondingly longer value"
                     :longer.key/two "another longer value to take up more flexbox space" }
      :dur "360s"
      :repeatCount "indefinite"}
     )
    ]
   ) 🔚
   
This is starting to look more like a proper layout. The display of whitespace elements can be controlled within the context of the flexbox by setting their ✳= [:code "flex-basis"] 🔚 property to 0 and adding a negative left margin that's exactly equal in size to the column gap of the flex parent (times -1) - in this case ✳= [:code "max(4px, 0.75em)"] 🔚 would be offset by  ✳= [:code "min(4px, -0.75em)"] 🔚. Importantly, avoiding using  ✳= [:code "display: none"] 🔚 (as the previous examples did) on the whitespace means that whitespace will correctly copy out of a code element laid out in this manner.

However, it feels like the small nested map should be able to shrink down to a smaller size and fit on a single line, while the larger nested map should expand to take up the full line underneath its key. It's not yet clear how they can be made to do that.

✳= [:h2 "A function definition"] 🔚
A function definition presents more complex layout challenges than arranging key/value pairs in a map. It may require more preprocessing on the server side to separate into the basic semantic elments needed for effective display.

✳= [:h3 "Basic example"]🔚

✳=
[:pre {:style (style {:grid-column "1 / span 4"})}
 (page/expr->hiccup
  
  '(defn de-jong
     "Returns A Peter de Jong attractor function.

Use with clojure.core/iterate."
     {:added "2023-06-11"}
     [^Double a ^Double b ^Double c ^Double d]
     (fn [[^Double x ^Double y]]
       [(- (Math/sin (* a y)) (Math/cos (* b x)))
        (- (Math/sin (* c x)) (Math/cos (* d y)))]))
  
  )] 🔚
  
✳=
[:pre
 (page/expr->hiccup
  '(defn
     ^{:doc "mymax [xs+] gets the maximum value in xs using > "
       :test (fn []
               (assert (= 42  (mymax 2 42 5 4))))
       :user/comment "this is the best fn ever!"}
     mymax
     ([x] x)
     ([x y] (if (> x y) x y))
     ([x y & more]
      (reduce mymax (mymax x y) more)))
  )
 ]
🔚


✳= [:h3 "Manual example"]🔚

✳=
[:pre
 {:style "grid-column: 1 / span 4;"}
 [:span
  {:class "language-clojure list"}
  [:span {:class "language-clojure open-paren"} "("]
  [:span {:class "language-clojure list-contents"
          :style (style {:display "flex"
                         :flex-wrap "wrap"
                         :flex-direction "row"})}
   [:span {:class "language-clojure def-form"
           :style (style {:flex "0 0 100%"})}
    [:span {:class "language-clojure symbol"} "defn"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span {:class "language-clojure symbol"} "de-jong"]
    [:span {:class "language-clojure whitespace"} " "]]
   [:span
    {:class "language-clojure string docstring"
     :style (style {:flex "0 0 100%"})}
    [:span {:class "language-clojure double-quote"} "\""]
    "Returns A Peter de Jong attractor function."
    [:br]
    ""
    [:br]
    "Use with clojure.core/iterate."
    [:span {:class "language-clojure double-quote"} "\""]]
   [:span {:class "language-clojure whitespace"} " "]
   [:span
    {:class "language-clojure map map-flex-contents"}
    [:span {:class "language-clojure open-brace"} "{"]
    [:span {:class "language-clojure contents"}
     [:span {:class "language-clojure keyword"} ":added"]
     [:span {:class "language-clojure whitespace"} " "]
     [:span {:class "language-clojure string"} "&quot;2023-06-11&quot;"]
     [:span {:class "language-clojure whitespace"} " "]
     [:span {:class "language-clojure keyword"} ":description"]
     [:span {:class "language-clojure whitespace"} " "]
     [:span {:class "language-clojure string"} "A reader in Holland, Peter de Jong of Leiden, has already suggested some other iteration formulas that produce bizarre shapes and images."]
     [:span {:class "language-clojure whitespace"} " "]]
    [:span {:class "language-clojure close-brace"} "}"]]
   [:span {:class "language-clojure whitespace"} " "]
   [:span
    {:class "language-clojure vector"
     :style (style {:flex-basis "100%"})}
    [:span {:class "language-clojure open-brace"} "["]
    [:span {:class "language-clojure vector-contents"
            :style (style {:display "flex"
                           :flex-wrap "wrap"})}
     [:span
      {:class "language-clojure meta"}
      [:span {:class "language-clojure caret"} "^"]
      [:span
       {:class "language-clojure map"}
       [:span {:class "language-clojure open-brace"} "{"]
       [:span {:class "language-clojure keyword"} ":tag"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span {:class "language-clojure symbol"} "Double"]
       [:span {:class "language-clojure close-brace"} "}"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span {:class "language-clojure symbol"} "a"]]
     [:span {:class "language-clojure whitespace"} " "]
     [:span
      {:class "language-clojure meta"}
      [:span {:class "language-clojure caret"} "^"]
      [:span
       {:class "language-clojure map"}
       [:span {:class "language-clojure open-brace"} "{"]
       [:span {:class "language-clojure keyword"} ":tag"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span {:class "language-clojure symbol"} "Double"]
       [:span {:class "language-clojure close-brace"} "}"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span {:class "language-clojure symbol"} "b"]]
     [:span {:class "language-clojure whitespace"} " "]
     [:span
      {:class "language-clojure meta"}
      [:span {:class "language-clojure caret"} "^"]
      [:span
       {:class "language-clojure map"}
       [:span {:class "language-clojure open-brace"} "{"]
       [:span {:class "language-clojure keyword"} ":tag"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span {:class "language-clojure symbol"} "Double"]
       [:span {:class "language-clojure close-brace"} "}"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span {:class "language-clojure symbol"} "c"]]
     [:span {:class "language-clojure whitespace"} " "]
     [:span
      {:class "language-clojure meta"}
      [:span {:class "language-clojure caret"} "^"]
      [:span
       {:class "language-clojure map"}
       [:span {:class "language-clojure open-brace"} "{"]
       [:span {:class "language-clojure keyword"} ":tag"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span {:class "language-clojure symbol"} "Double"]
       [:span {:class "language-clojure close-brace"} "}"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span {:class "language-clojure symbol"} "d"]]]
    [:span {:class "language-clojure close-brace"} "]"]]
   [:span {:class "language-clojure whitespace"} " "]
   [:span
    {:class "language-clojure list"}
    [:span {:class "language-clojure open-paren"} "("]
    [:span {:class "language-clojure symbol"} "fn"]
    [:span {:class "language-clojure whitespace"} " "]
    [:span
     {:class "language-clojure vector"}
     [:span {:class "language-clojure open-brace"} "["]
     [:span
      {:class "language-clojure vector"}
      [:span {:class "language-clojure open-brace"} "["]
      [:span
       {:class "language-clojure meta"}
       [:span {:class "language-clojure caret"} "^"]
       [:span
        {:class "language-clojure map"}
        [:span {:class "language-clojure open-brace"} "{"]
        [:span {:class "language-clojure keyword"} ":tag"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "Double"]
        [:span {:class "language-clojure close-brace"} "}"]]
       [:span {:class "language-clojure whitespace"} " "]
       [:span {:class "language-clojure symbol"} "x"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span
       {:class "language-clojure meta"}
       [:span {:class "language-clojure caret"} "^"]
       [:span
        {:class "language-clojure map"}
        [:span {:class "language-clojure open-brace"} "{"]
        [:span {:class "language-clojure keyword"} ":tag"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "Double"]
        [:span {:class "language-clojure close-brace"} "}"]]
       [:span {:class "language-clojure whitespace"} " "]
       [:span {:class "language-clojure symbol"} "y"]]
      [:span {:class "language-clojure close-brace"} "]"]]
     [:span {:class "language-clojure close-brace"} "]"]]
    [:span {:class "language-clojure whitespace"} " "]
    [:span
     {:class "language-clojure vector"}
     [:span {:class "language-clojure open-brace"} "["]
     [:span
      {:class "language-clojure list"}
      [:span {:class "language-clojure open-paren"} "("]
      [:span {:class "language-clojure symbol"} "-"]
      [:span {:class "language-clojure whitespace"} " "]
      [:span
       {:class "language-clojure list"}
       [:span {:class "language-clojure open-paren"} "("]
       [:span {:class "language-clojure symbol"} "Math/sin"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span
        {:class "language-clojure list"}
        [:span {:class "language-clojure open-paren"} "("]
        [:span {:class "language-clojure symbol"} "*"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "a"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "y"]
        [:span {:class "language-clojure close-paren"} ")"]]
       [:span {:class "language-clojure close-paren"} ")"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span
       {:class "language-clojure list"}
       [:span {:class "language-clojure open-paren"} "("]
       [:span {:class "language-clojure symbol"} "Math/cos"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span
        {:class "language-clojure list"}
        [:span {:class "language-clojure open-paren"} "("]
        [:span {:class "language-clojure symbol"} "*"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "b"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "x"]
        [:span {:class "language-clojure close-paren"} ")"]]
       [:span {:class "language-clojure close-paren"} ")"]]
      [:span {:class "language-clojure close-paren"} ")"]]
     [:span {:class "language-clojure whitespace"} " "]
     [:span
      {:class "language-clojure list"}
      [:span {:class "language-clojure open-paren"} "("]
      [:span {:class "language-clojure symbol"} "-"]
      [:span {:class "language-clojure whitespace"} " "]
      [:span
       {:class "language-clojure list"}
       [:span {:class "language-clojure open-paren"} "("]
       [:span {:class "language-clojure symbol"} "Math/sin"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span
        {:class "language-clojure list"}
        [:span {:class "language-clojure open-paren"} "("]
        [:span {:class "language-clojure symbol"} "*"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "c"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "x"]
        [:span {:class "language-clojure close-paren"} ")"]]
       [:span {:class "language-clojure close-paren"} ")"]]
      [:span {:class "language-clojure whitespace"} " "]
      [:span
       {:class "language-clojure list"}
       [:span {:class "language-clojure open-paren"} "("]
       [:span {:class "language-clojure symbol"} "Math/cos"]
       [:span {:class "language-clojure whitespace"} " "]
       [:span
        {:class "language-clojure list"}
        [:span {:class "language-clojure open-paren"} "("]
        [:span {:class "language-clojure symbol"} "*"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "d"]
        [:span {:class "language-clojure whitespace"} " "]
        [:span {:class "language-clojure symbol"} "y"]
        [:span {:class "language-clojure close-paren"} ")"]]
       [:span {:class "language-clojure close-paren"} ")"]]
      [:span {:class "language-clojure close-paren"} ")"]]
     [:span {:class "language-clojure close-brace"} "]"]]
    [:span {:class "language-clojure close-paren"} ")"]]]
  [:span {:class "language-clojure close-paren"} ")"]]]
🔚




