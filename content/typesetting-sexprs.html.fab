âœ³ (ns respatialized.writing.typesetting-sexprs
  (:require [garden.core :as garden :refer [style css]]
            [garden.selectors :as select]
            [site.fabricate.prototype.page :as page]
            [respatialized.css :as site-css])
  ) ðŸ”š
  

âœ³(def metadata {:title "typesetting s-expressions with CSS"
               :page-style (css
                            [:.keyword {:color (site-css/oklch-hex-conversions "ochre")}]
                            [:.grid-aligned-map
                             #_[:.whitespace :.comma 
                                :.open-brace :.close-brace {:display "none"}]
                             [(select/nth-child 2) {:grid-column-start 1}]
                             {:display "grid"
                              :font-family "'Chivo Mono', monospace"
                              :font-variant-ligatures "none"
                              :grid-template-columns "repeat(2,minmax(3px, 1fr))"}
                             ])}) ðŸ”š
                             

âœ³= [:h1 (:title metadata)] ðŸ”š

âœ³=[:strong "Problem statement"] ðŸ”š CSS is a very powerful library for styling and laying out page elements, but almost no extant HTML-based syntax highlighting tools for Clojure take full advantage of it. Instead, most people opt for code-based syntax highlighters (or no syntax highlighting at all).


âœ³=[:strong "Assumptions"] ðŸ”š
âœ³=[:ul
 [:li "The structural and sequential nature of Lisp expressions means they more readily lend themselves to CSS selectors than the code of other programming languages"]
 [:li "Server side rendering with rewrite-clj means that all of the relevant syntax and semantics of Clojure code can be preserved via appropriate HTML classes"]
 ] ðŸ”š
 
âœ³=[:strong "Goals"] ðŸ”š
I believe that Clojure source code deserves beautiful syntax highlighting that leverages the full power of modern CSS.

âœ³= [:h2 "aligning map elements to CSS grid"] ðŸ”š
âœ³=
(update-in
 (page/expr->hiccup
  {:a/key "value"
   :attributeName "stroke-dashoffset"
   :values "0;2000"
   :some/key "some other value"
   :additive "sum"
   :dur "360s"
   :repeatCount "indefinite"}
  ) [1 :class]  #(str % " grid-aligned-map"))
ðŸ”š

Problems with this approach:
âœ³= [:ul
  [:li "whitespace and commas are treated as grid elements unless there's a way to get the grid to ignore them; the " [:a {:href "https://stackoverflow.com/a/32380418"} [:code "nth-child"]" selector will not skip elements set to " [:code "display: none;"]]]
  [:li "lack of support for CSS subgrid means that nested maps will be difficult to align"]]
ðŸ”š

âœ³= [:h2 "laying map elements out with flexbox"] ðŸ”š

