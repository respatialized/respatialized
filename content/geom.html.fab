

âœ³(ns respatialized.documentation.geom
  (:require [thi.ng.geom.core :as g]
            [thi.ng.geom.svg.adapter]
            [thi.ng.geom.svg.core :as svg]
            [thi.ng.geom.svg.adapter :as adapt]
            [thi.ng.geom.vector :refer [vec2]]
            [thi.ng.color.core :as col]
            [thi.ng.geom.rect :as rect]
            [thi.ng.color.gradients :as grad]
            [thi.ng.math.core :as m]
            [thi.ng.math.macros :as mm]
            [clojure2d.color :as clj2d-col]
            [respatialized.styles :refer [geom-style]]
            [garden.core :as garden]
            )) ğŸ”š
            
âœ³(def metadata
  {:title "thi.ng/geom"
   :page-style (garden/css geom-style)}) ğŸ”š
   

âœ³= [:h1 {:class "big wide"} "thi.ng/geom"] ğŸ”š

computational geometry with Clojure

âœ³ (defn spiral
  [center start end r1 r2 steps]
  (map
   (fn [r theta] (m/+ (g/as-cartesian (vec2 r theta)) center))
   (range r1 r2 (mm/subdiv r2 r1 steps))
   (range start end (mm/subdiv end start steps))))
ğŸ”š



âœ³(def color-gradient
  (grad/cosine-gradient
   12 [[0.500 0.500 0.500] [0.500 0.500 0.500] [0.800 0.800 0.500] [0.000 0.200 0.500]])
  )ğŸ”š



âœ³(def color-gradient-2
  (grad/cosine-gradient
   2
   (grad/cosine-coefficients (col/hex->int "#ff5549") (col/hex->int "#5abeb1"))))
ğŸ”š



âœ³= (let [rect (rect/rect 50 50 300 700)]
   (svg/serialize
    (svg/svg
     {:width 400 :height 800}
     (svg/defs
       (update
        (apply svg/linear-gradient
               "gradient" {}
               (map-indexed
                (fn [ix c]
                  [ix c])
                color-gradient-2))
        1 assoc :x1 0 :x2 0 :y1 0 :y2 1) )
     (-> rect
         (adapt/all-as-svg )
         (assoc-in [1 :fill] "url(#gradient)"))))
   ) ğŸ”š
   

