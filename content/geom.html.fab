

âœ³(ns respatialized.documentation.geom
  (:require [thi.ng.geom.core :as g]
            [thi.ng.geom.svg.adapter]
            [thi.ng.geom.svg.core :as svg]
            [thi.ng.geom.svg.adapter :as adapt]
            [thi.ng.geom.vector :refer [vec2]]
            [thi.ng.color.core :as col]
            [thi.ng.geom.rect :as rect]
            [thi.ng.color.gradients :as grad]
            [thi.ng.math.core :as m]
            [thi.ng.math.macros :as mm]
            [fastmath.easings :as easings]
            [respatialized.styles :refer [geom-style]]
            [respatialized.geometry :as geometry]
            [garden.core :as garden :refer [style]]
            )) ðŸ”š
            
âœ³(def metadata
  {:title "thi.ng/geom"
   :page-style (garden/css geom-style)}) ðŸ”š
   

âœ³ (def colors {:red (col/hex->int "#ff5549")
              :blue (col/hex->int "#5abeb1")
              :white (col/hex->int "#e6e6e6")}) ðŸ”š
              
âœ³= [:h1 {:class "big wide"} "thi.ng/geom"] ðŸ”š
âœ³(def color-gradient-2
  (grad/cosine-gradient
   2
   (grad/cosine-coefficients (:red colors) (:blue colors))))
ðŸ”š
âœ³= [:figure 
  (let [rect (rect/rect 5 15 900 30)]
    (svg/serialize
     (svg/svg
      {:width 930 :height 45
       :style (style {:grid-column "1 / -1"})
       }
      (svg/defs
        (update
         (apply svg/linear-gradient
                "gradient" {}
                (map-indexed
                 (fn [ix c]
                   [ix c])
                 color-gradient-2))
         1 assoc :x1 0 :x2 1 :y1 0 :y2 0) )
      (-> rect
          (adapt/all-as-svg )
          (assoc-in [1 :fill] "url(#gradient)"))))
    )] ðŸ”š
    
computational geometry with Clojure

âœ³= [:h4 {:class "wide"}  "thi.ng.geom.rect"] ðŸ”š
âœ³=
(let [pct-range #_[0.25 0.3 0.35 0.45 0.67 0.75 0.95 0.99]
      (map (fn [i] (easings/cubic-in (/ i 25))) (range 15 24 0.8))
      rect-count 13
      col-count (count pct-range)
      w 600 h 700
      max-y (* h 0.95)
      r-width (/ (* w 0.9) col-count)
      r-height 10]

  (svg/serialize
   (svg/svg {:width w :height h}
            (for [[ix pct] (map-indexed vector pct-range)
                  y (geometry/evenly-space-up-to rect-count max-y pct)]
              (let [x (* (/ (* 1.0 w) col-count) ix)
                    r-row-height (/ (* (* max-y pct) 0.75) rect-count)]
                (let [rect-geom (rect/rect x y r-width r-row-height)
                      r-code (with-out-str (print rect-geom))]
                  (-> rect-geom
                      adapt/all-as-svg
                      (update 1 assoc :stroke "#e6e6e6" :fill "none"
                              :stroke-dasharray "5,2"))))))))

ðŸ”š

Rectangular shape generation