

âœ³(ns respatialized.documentation.geom
  (:require [thi.ng.geom.core :as g]
            [thi.ng.geom.svg.adapter]
            [thi.ng.geom.svg.core :as svg]
            [thi.ng.geom.svg.adapter :as adapt]
            [thi.ng.geom.vector :refer [vec2]]
            [thi.ng.color.core :as col]
            [thi.ng.geom.rect :as rect]
            [thi.ng.color.gradients :as grad]
            [thi.ng.math.core :as m]
            [thi.ng.math.macros :as mm]
            [fastmath.easings :as easings]
            [site.fabricate.prototype.page :as page]
            [respatialized.styles :refer [geom-style]]
            [respatialized.geometry :as geometry]
            [garden.core :as garden :refer [style css]]
            [clojure.string :as str]
            [clojure.set :as set])
  (:import [thi.ng.geom.types Rect2 Triangle2])
  ) ðŸ”š
  
âœ³(def metadata
  {:title "thi.ng/geom"
   :page-style (garden/css geom-style)}) ðŸ”š
   
âœ³ (def github-src-url "https://github.com/thi-ng/geom/tree/feature/no-org/src")  ðŸ”š

âœ³ (def colors {:red (col/hex->int "#ff5549")
             :blue (col/hex->int "#5abeb1")
             :white (col/hex->int "#e6e6e6")
             :pink (col/hex->int "#e788ea")
             :yellow
             {:hex "#f1d938"
              :int (col/hex->int "#f1d938")}}) ðŸ”š
              
âœ³= [:h1 {:class "big wide"} "thi.ng/geom"] ðŸ”š
âœ³(def color-gradient-2
  (grad/cosine-gradient
   2
   (grad/cosine-coefficients (:red colors) (:blue colors))))
ðŸ”š
âœ³= [:figure 
  (let [rect (rect/rect 5 15 900 30)]
    (svg/serialize
     (svg/svg
      {:width 930 :height 45
       :style (style {:grid-column "1 / -1"})
       }
      (svg/defs
        (update
         (apply svg/linear-gradient
                "gradient" {}
                (map-indexed
                 (fn [ix c]
                   [ix c])
                 color-gradient-2))
         1 assoc :x1 0 :x2 1 :y1 0 :y2 0) )
      (-> rect
          (adapt/all-as-svg )
          (assoc-in [1 :fill] "url(#gradient)"))))
    )] ðŸ”š
    
computational geometry with Clojure

âœ³= [:h4 {:class "wide"}  "thi.ng.geom.rect"] ðŸ”š

Rectangular shape generation

âœ³ (defn geom->hiccup [g]
  (let [lit (geometry/get-literal g)]
    [:pre 
     [:code {:style (style {:color "#ff5549" :font-weight 700
                            :font-size "1.05em"})}
      "#" (:tag lit)] [:br]
     (page/expr->hiccup (:form lit))])) ðŸ”š
     
âœ³=
(let [pct-range #_[0.25 0.3 0.35 0.45 0.67 0.75 0.95 0.99]
      (map (fn [i] (easings/cubic-in (/ i 25))) (range 15 24 0.8))
      rect-count 13
      col-count (count pct-range)
      w 900 h 700
      max-y (* h 0.95)
      r-width (/ (* w 0.9) col-count)
      r-height 10]

  (svg/serialize
   (svg/svg {:width w :height h}
            (for [[ix pct] (map-indexed vector pct-range)
                  y (geometry/evenly-space-up-to rect-count max-y pct)]
              (let [x (* (/ (* 1.0 w) col-count) ix)
                    r-row-height (/ (* (* max-y pct) 0.75) rect-count)]
                (let [rect-geom (rect/rect x y r-width r-row-height)]
                  [:g
                   (-> rect-geom
                       adapt/all-as-svg
                       (update 1 assoc :stroke "#e6e6e6" :fill "#1a1a1a"
                               :class "annotated"
                               :stroke-dasharray "6,2"))
                   [:foreignObject {:class "annotation"
                                    :x 15 :y 450
                                    :width 450 :height 300}
                    [:div {:xmlns "http://www.w3.org/1999/xhtml"}
                     (geom->hiccup rect-geom)
                     ]]]))))))

ðŸ”š
âœ³ (defmethod page/node->hiccup :var [node]
  [:span {:class "language-clojure var"}
   "#'" (str (get-in node [:children 0 :value]))]) ðŸ”š
   
âœ³  (def geom-core-protocols
    (filter (fn [[sym var]]
              (let [value (var-get var)]
                (and (map? value)
                     (not (sorted? value))
                     (some? (:on-interface value)))))
            (ns-publics 'thi.ng.geom.core))
    )  ðŸ”š
    
âœ³=
(list
 [:h5 [:span {:class "wide"} "Core type:"] [:br]
  [:code [:a {:href (str github-src-url "/thi/ng/geom/types.cljc#L24")
              :target "_blank"}
          "thi.ng.geom.types.Rect2"]]]
 "a 2d plane with a position, width, and height - specified either by coordinate points or vectors"
 [:h4 [:code [:a {:href (str github-src-url "/thi/ng/geom/rect.cljc" )
                  :target "_blank"}
              "thi.ng.geom.rect"]] " namespace"]

 [:h5 {:class "wide"} "Functions"]
 [:dl 
  (for [[sym v] (ns-publics 'thi.ng.geom.rect)]
    (list [:dt {:style (style {:grid-column "1 / span 1"})} [:code sym]]
          [:dd {:style (style {:grid-column "span 3"})}
           (geometry/var-meta->hiccup (meta v) github-src-url)
           #_[:pre (page/expr->hiccup (meta v))]]))
  
  ]
 [:h5 [:code "thi.ng.geom.core"] [:span {:class "wide"} " implemented protocols"]]
 [:dl
  (for [[sym var]
        (filter (fn [[sym var]]
                  (let [value (var-get var)]
                    (contains?  (:impls value) thi.ng.geom.types.Rect2)))
                geom-core-protocols) ]
    (list [:dt {:style (style {:grid-column "1 / span 1"})}
           (page/expr->hiccup sym)]
          (let [v (var-get var)]
            [:dt
             {:style (style {:grid-column "span 3"})}
             (-> v
                 (select-keys [:on :sigs :arglists])
                 (page/expr->hiccup ))]))
    )])
ðŸ”š




âœ³=
[:figure {:grid-column "1 / span 4"}
 [:figcaption
  #_{:style (style {:align-self "end"})}
  [:h4 {:class "wide"}
   "Grid elements deformed"]]
 (let [ratio 1.618
       rows 20
       grid-w 85 grid-h 45
       cols (int (* rows ratio))
       h 1.2
       w (* h ratio)
       rect-grid
       (for [x (range 0 grid-w (/ grid-w cols))
             y (range 0 grid-h (/ grid-h rows))]
         (rect/rect x y w h))
       r-attrs {:fill "#e6e6e6"}
       filter [:filter {:id "texture-filter-1"
                        :filterUnits "userSpaceOnUse"
                        :color-interpolation-filters "sRGB"}
               [:feImage {:href "/media/7142992537_63cdc95211_o.jpg"
                          :result "FEIMG"}]
               [:feDisplacementMap
                {:scale 1.5 :in "SourceGraphic"
                 :xChannelSelector "B" :yChannelSelector "R"}]]
       filter-2
       [:filter {:id "texture-filter-2"
                 :filterUnits "userSpaceOnUse"
                 :color-interpolation-filters "sRGB"}
        [:feImage {:href "/media/7142992537_63cdc95211_o.jpg"
                   :result "FEIMG"}]
        [:feDisplacementMap
         {:scale 1.5 :in "SourceGraphic"
          :xChannelSelector "R" :yChannelSelector "G"}]]
       ]
   (svg/serialize
    (svg/svg
     {:width "auto"  :height "auto"
      :style (style { :grid-column "1 / span 3"})
      :viewBox "0 0 100 100"}
     [:defs filter filter-2]
     (->> rect-grid
          adapt/all-as-svg
          (map #(update % 1 merge {:fill "#ff5549"}))
          (reduce conj [:g {:style (style {:filter "url(#texture-filter-1)"})}]))
     (->> rect-grid
          adapt/all-as-svg
          (map #(update % 1 merge {:fill "#5abeb1" }))
          (reduce conj [:g {:style (style {:filter "url(#texture-filter-2)"})
                            :transform "translate(2.5  2.5)"}]))
     ))

   )
 
 ]
ðŸ”š

âœ³= [:h4 {:class "wide"}  "thi.ng.geom.triangle"] ðŸ”š

2-dimensional and 3-dimensional triangle generation
