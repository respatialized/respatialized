
âœ³(ns respatialized.sketchbook.20230116
  (:require [clojure2d.core :as clj2d]
            [garden.core :refer [style]]
            [svg-clj.jvm-utils :as svgutils])) ðŸ”š
            
âœ³(def metadata {:title "Experimentation with SVG filters"}) ðŸ”š
âœ³= [:h1 (:title metadata)]ðŸ”š

In both clojure2d and in HTML/CSS. 

âœ³=[:h3 "Resources"] ðŸ”š
âœ³= [:ul [:li [:a {:href "https://www.smashingmagazine.com/2021/09/deep-dive-wonderful-world-svg-displacement-filtering/"} "Smashing Magazine: A Deep Dive Into The Wonderful World Of SVG Displacement Filtering"]]
  [:li [:a {:href "https://vanseodesign.com/web-design/svg-filter-primitives-fediffuselighting/"} "Create SVG Lighting Effects With The feDiffuseLighting Filter Primitive"]]] ðŸ”š
  
âœ³ (def glyph 
  (svgutils/svg-str->hiccup
   (slurp "resources/respatialized/glyph-main.svg"))) ðŸ”š


âœ³=[:h3 "Starting point"] ðŸ”š

âœ³= [:figure glyph] ðŸ”š

âœ³= [:figure [:img {:src "/media/traffic-light-crop.jpg"}]] ðŸ”š

âœ³(def disp-filter
  [:filter {:id "traffic-light-disp-filter-0" :filterUnits "userSpaceOnUse"
            :x -25 :y -25
            :color-interpolation-filters "sRGB"}
   [:feImage {:href "/media/traffic-light-crop.jpg"
              :result "FEIMG"}]
   [:feDisplacementMap {:id "traffic-light-disp-map-0"
                        :in "SourceGraphic" :xChannelSelector "B" :yChannelSelector "G"
                        :scale 9}]]) ðŸ”š
                        
âœ³ (def blur-filter
  [:filter {:id "gauss-blur"}]) ðŸ”š
  
âœ³= [:h3 "Application 1: Displacement Map"] ðŸ”š

âœ³= [:figure {:style (style {:max-width 700})}
  (let [[[tag attrs nv defs] contents] (split-at 4 glyph) ]
    (vec (concat [tag attrs nv (conj defs disp-filter)]
                 (assoc-in (vec contents)
                           [0 1 :style]
                           (style {:filter "url(#traffic-light-disp-filter-0)"})))))] ðŸ”š
                           

âœ³= [:h3 "Small multiples with functions"] ðŸ”š


âœ³ (defn add-filter [svg-def filter-def]
  (let [[[tag attrs nv defs] contents] (split-at 4 svg-def) ]
    (vec (concat [tag attrs nv (conj defs filter-def)]
                 (vec contents)))))  ðŸ”š
                 

âœ³= (let [filter-params
       (vec
        (for [scale (range 2 37 7) 
              y (range 0 -150 -30)]
          {:scale scale :y y
           :id (str "disp-filter-scale" scale "-y" y)})) 
       grid-positions
       (vec (for [x (range 0 200 40)
                  y (range 0 200 40)]
              {:x x :y y}))
       svg-g (peek glyph)
       transformed-groups
       (map-indexed
        (fn [ix {:keys [x y]}]
          (-> svg-g
              (assoc-in [1 :id] (str "glyph-sm-group-" ix))
              (assoc-in [1 :transform] (format "translate(%d,%d),scale(0.2)" x y))
              (assoc-in [1 :style] (style
                                    {:filter (format "url(#%s)"
                                                     (get-in filter-params [ix :id]))}))
              ))
        grid-positions)]
   [:figure
    (apply conj
           (reduce
            (fn [svg-def {:keys [scale y id]}]
              (add-filter svg-def
                          (-> disp-filter
                              (assoc-in [3 1 :scale] scale)
                              (assoc-in [1 :id] id)
                              (assoc-in [1 :y] y))))
            (update (pop glyph) 1 assoc :width 900 :height 900)
            filter-params)
           transformed-groups)]) ðŸ”š                