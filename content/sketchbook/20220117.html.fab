âœ³(ns respatialized.sketches.20220117
(:require
 [respatialized.svg :as svg]
 [clojure.java.io :as io]
 [thi.ng.math.core :as math]
 [thi.ng.math.noise :as noise]
 [thi.ng.geom.core :as g]
 [thi.ng.geom.circle :as c]
 [thi.ng.geom.bezier :as b]
[thi.ng.geom.utils :as utils]
[thi.ng.geom.spatialtree :as stree]
 [clojure.string :as str]
 [garden.core :refer [css]]
 [svg-clj.path :as path]
 [svg-clj.utils :as svg-utils]
 [thi.ng.geom.svg.adapter :as svg-adapter]
 [thi.ng.geom.polygon :as poly]
 [thi.ng.geom.matrix :as matrix]
 [thi.ng.geom.rect :as rect])) ðŸ”š

âœ³(def metadata {:title "Sketchbook | 20220117"
:page-style respatialized.writing.design.database/page-css}) ðŸ”š
âœ³(def svg-sketch
(svg-utils/svg-str->hiccup
   (slurp "resources/respatialized/2022-01-17.svg"))) ðŸ”š
âœ³(def geometry
(mapv #(try
         (g/scale (svg/element->geom %) (/ 1.0 0.27))
(catch Exception e (do (println %) nil)))
(drop 2 (last svg-sketch)))) ðŸ”š

âœ³ (def quadtree
  (let  [{:keys [width height]} (second svg-sketch)]
    (stree/quadtree 0 0 width height))) ðŸ”š
âœ³(comment
   (let [q (reduce #(g/add-point % %2 %2) quadtree  (g/sample-uniform (c/circle 200 200 50) 8 false) )]
     (map #(stree/select-with-shape q %) geometry)
     )

   (g/add-point quadtree [-1 -1] [-1 -1]))ðŸ”š
âœ³ (def arc-points-tree
    (->> (range 400 1900 10)
         (map #(g/sample-uniform (c/circle -400 0 %) 7 false))
         (apply concat)
         distinct
         (reduce (fn [tree pt] (let [r (g/add-point tree pt pt)]
                                 (if r r tree)))
                 quadtree))) ðŸ”š

âœ³(def intersecting-points
  (->> geometry
       (map (fn [g] (let [bounded-pts (stree/select-with-shape arc-points-tree (g/bounds g))]
                      (filter #(g/contains-point? g %) bounded-pts))))
       (apply concat)
       distinct)) ðŸ”š
âœ³(comment
  (filter empty? (map #(stree/select-with-shape arc-points-tree (g/bounds %)) geometry))

   (count (stree/get-children arc-points-tree))

   )ðŸ”š
âœ³= [:h2 "20220117"] ðŸ”š

âœ³= [:figure (svg-adapter/all-as-svg
             (into [:svg
                    (let [{:keys [width height]} (second svg-sketch)]
                      {:width width :height height}) ] (pmap #(c/circle % 3) intersecting-points)))
  [:figcaption "SVG from Inkscape parsed into " [:code "thi.ng"] " geometry for procedural element generation. Renders speedily due to " [:code "thi.ng"] "'s helpful " [:a {:href "https://github.com/thi-ng/geom/blob/257eb850fbe3932099da44c779a93e8e4a293b1b/src/thi/ng/geom/path.cljc#L55"} "SVG path parser"] " and " [:a {:href "https://github.com/thi-ng/geom/blob/feature/no-org/src/thi/ng/geom/spatialtree.cljc"} "spatial tree"] " implementation."]] ðŸ”š
