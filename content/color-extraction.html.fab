âœ³(ns respatialized.colors.extraction
  (:require [tech.v3.tensor :as tensor]
            [tech.v3.datatype :as dtype]
            [tech.v3.datatype.functional :as dtype-fn]
            [tech.v3.dataset :as ds]
            [tech.v3.dataset.tensor :refer [tensor->dataset]]
            [tablecloth.api :as api]
            [tech.v3.libs.buffered-image :as dtype-img]
            [clojure.data.json :as json]
            [clojure.java.io :as io]
            [respatialized.colors :as colors]
            [clojure2d.color :as clj2d-color]
            [clojure2d.core :as clj2d]
            [fastmath.clustering :as cluster]
            [garden.core :as garden]
            [applied-science.darkstar :as darkstar])
(:import [javax.imageio ImageIO])) ðŸ”š

âœ³(def metadata {:title "Color Extraction Through Curve Fitting"})ðŸ”š

âœ³=[:h1 (:title metadata)]ðŸ”š

I would like to extract colors from an image. In so doing, I would like to meet two requirements:
âœ³= [:dl [:dt "Recognizability"] [:dd "The colors should be representative of the \"dominant\" colors in the image."]
  [:dt "Contrast"] [:dd "The levels of contrast in the palette extracted should respect accessibility guidelines for appropriate levels of contrast."]] ðŸ”š

This can be thought of as a constraint-based optimization problem: how can I fit a perceptual curve to the colors in an image?

âœ³=[:h2 "Example images"]ðŸ”š

Some public domain artwork will serve as a good starting point.

âœ³(def example-images [{:title "Carpente" :year 1944 :artist "Reijer Stolk" :img/url "https://live.staticflickr.com/65535/51913654989_7490d04a5a_4k.jpg"
:source "https://www.flickr.com/photos/vintage_illustration/51913654989/in/album-72177720297063629/"}
{:title "New York from the 34th Street Ferry" :year 1914 :artist "Rachael Robinson Elmer" :img/url "https://media.nga.gov/iiif/e848d2b4-72bb-4abc-8812-4aa2ab291d42/full/full/0/default.jpg" :source "https://www.nga.gov/collection/art-object-page.147966.html"}] )ðŸ”š

âœ³= (apply conj [:div]
     (for [{:keys [title artist img/url source year]} example-images]
       [:figure [:img {:src url}] [:figcaption [:a {:href source} title] " by " artist ", " year]]))ðŸ”š

âœ³=[:h2 "Contrast guidelines"]ðŸ”š

The US General Services Administration has a short âœ³=[:a {:href "https://accessibility.digital.gov/visual-design/color-and-contrast/"} "explainer site"]ðŸ”š on color contrast for accessibility purposes:

âœ³=[:blockquote "Make sure the contrast between the text and background is greater than or equal to 4.5:1 for small text and 3:1 for large text."]ðŸ”š

This requirement is relaxed for non-essential elements:

âœ³=[:blockquote "Color contrast ratio requirements apply to text and graphics that are essential for understanding the content or functionality. You donâ€™t need to meet color contrast requirements for logos or incidental graphic elements."]ðŸ”š

This produces the basis for the perceptual curve. The lightest color can be thought of as one extreme of the curve, and the darkest can be thought of as the opposite extreme. The necessary contrast between textual elements and their backgrounds can be achieved by taking colors from the extremes of the curve.

Here's an example:

âœ³=(let [plot-edn
      {:width 300 :height 200
       :title "Contrast Ratios Between Colors"
       :data {:values [{"color" 0 "ratio" 4.5} {"color" 1 "ratio" 3}
                       {"color" 2 "ratio" 2.5} {"color" 3 "ratio" 2.0}
                       {"color" 4 "ratio" 1.5} {"color" 5 "ratio" 1.0}
                       {"color" 6 "ratio" 0.5} {"color" 7 "ratio" 0.0}]}
       :layer [{:mark {:type :rule :color "gray"}
                :encoding {:y {:datum 3.0 :type :quantitative}}}
               {:mark {:type :bar
                       :color "black"}
                :encoding {:x {:field "color" :type :ordinal}
                           :y {:field "ratio" :type :quantitative}}}]}]
    (-> plot-edn
        json/write-str
        darkstar/vega-lite-spec->svg))  ðŸ”š

This is a pretty basic curve; others are possible. What's important to note is that it sets the minimum bounds: any textual element needs to have a contrast ratio of at least 3 when compared with the darkest or lightest color.

âœ³=[:h2 "Measuring constrast between colors"]ðŸ”š

The easiest way to get started is just to use an eyedropper to manually pick out some colors and find the contrast ratios between them.
âœ³(def carpente-manual-colors ["#332523" "#ffc81c" "#7e2322" "#ca3169" "#cb342f" "#727a30" "#e46c2d" "#f4f0eb" "#f5f1ec" ])ðŸ”š

âœ³=(apply conj [:div {:style (garden/style {:display "flex" })}]
(for [color carpente-manual-colors]
[:div {:style (garden/style {:flex "0 1 3em" :background-color color :height "2em"})}]))ðŸ”š


We need two fomulas to measure the visual contrast between two colors. The âœ³=[:a {:href "https://www.accessibility-developer-guide.com/knowledge/colours-and-contrast/how-to-calculate/"} "Accessibility Developer Guide"]ðŸ”š provides an example of how to compare two color using their relative luminance. It links to the W3C, which defines "relative luminance" for the SRGB color space. It can be calculated using any RGB hex code.

âœ³=[:dl [:dt [:b "Relative luminance"]]
   [:dd [:b "L"] " = 0.2126 * R + 0.7152 * G + 0.0722 * B"
    [:dl [:dt [:b "R"]] [:dd "if RsRGB <= 0.03928 then R = RsRGB/12.92 else R = ((RsRGB+0.055)/1.055) ^ 2.4"]
     [:dt [:b "G"]] [:dd "if RsRGB <= 0.03928 then G = GsRGB/12.92 else G = ((GsRGB+0.055)/1.055) ^ 2.4"]
     [:dt [:b "B"]] [:dd "if RsRGB <= 0.03928 then B = BsRGB/12.92 else B = ((BsRGB+0.055)/1.055) ^ 2.4"]]]
 [:dt [:b "Contrast Ratio"]] [:dd [:b "C"] " = (L1 + 0.05) / (L2 + 0.05)"
                         [:dl [:dt "L1"] [:dd "The lighter of the two colors"]
                          [:dt "L2"] [:dd "The darker of the two colors"]]]]ðŸ”š

âœ³=[:h5 "Implementations in Clojure"]ðŸ”š

âœ³+(defn hex->rl [hex-color]
   (let [hex (if #(.startsWith hex-color "#") (subs hex-color 1) hex-color)
          [R G B] (map
                   (fn [hex-chars]
                     (-> (apply str hex-chars)
                         (Integer/parseInt 16)
                         (/ 255.0)
                         (#(if (<= % 0.03928) (/ % 12.92)
                               (Math/pow (/ (+ % 0.055) 1.055) 2.4)))))
                   (partition 2 hex))]
     (+ (* 0.2126 R) (* 0.7152 G) (* 0.0722 B))))ðŸ”š

âœ³+(defn rls->cr [colors]
   (let [L1 (apply max colors)
         L2 (apply min colors)]
     (/ (+ L1 0.05) (+ L2 0.05))))ðŸ”š



For a "light theme" the basis color for defining contrast ratios would be the off-white color of âœ³=(let [c (last carpente-manual-colors)] [:span c [:span {:style (garden/style {:color c} )} "â—¤"]])ðŸ”š, whereas for a "dark theme" it would be the near-black color of âœ³=(let [c (first carpente-manual-colors)] [:span c [:span {:style (garden/style {:color c} )} "â—¤"]])ðŸ”š. The contrast ratio of those colors is:

âœ³+=(rls->cr [(hex->rl (last carpente-manual-colors))
              (hex->rl (first carpente-manual-colors)) ])ðŸ”š


Returning to the plot above with those demo colors, we can recolor it so that the bars visually depict the contrast ratios instead of measuring them in a purely quantitative manner, and we can do so with actual example colors instead of abstractly defined ratios.

âœ³(defn plot-edn->svg [p]
   (-> p json/write-str darkstar/vega-lite-spec->svg))ðŸ”š

âœ³=(let [base-color (last carpente-manual-colors)
        contrasts
        (->> carpente-manual-colors
             butlast
             (map (fn [c] {:color c
                           :contrast (rls->cr [(hex->rl base-color)
                                               (hex->rl c)])}))
             (into []))]
  (plot-edn->svg
   {:width 400 :height 300
    :data {:values contrasts}
    :layer [{:mark :rule
             :data {:values [{:contrast 3.0} {:contrast 4.5}]}
             :encoding {:y {:field :contrast :type :quantitative}}}
            {:mark :bar
             :encoding {:x {:field :color :type :nominal}
                        :y {:field :contrast :type :quantitative}
                        :color {:field :color :type :nominal :scale nil}}}]})
    )ðŸ”š

âœ³=[:h2 "Measuring color density within an image"]ðŸ”š

To contextualize the color space of an image, histograms can be a useful tool; it is useful to see the space the optimization will run in.

The image will be represented as a tensor using the capabilities of âœ³=[:code "dtype-next"]ðŸ”š; a 2d image in the RGB colorspace is a 3-dimensional tensor [Y, X, RGB].

âœ³(def carpente-img
  (dtype-img/load "./public/media/carpente-reijer-stolk-sm.jpg")) ðŸ”š

âœ³(def carpente-tens
  (tensor/ensure-tensor carpente-img )) ðŸ”š

We can see the shape of the tensor by getting its dimensions after reading it in: âœ³=[:code (str (:shape (.dimensions carpente-tens)))]ðŸ”š

The conversion from RGB to HSV needs to be mapped over the X and Y dimensions; the RGB (or Z) dimension for each pixel value is modified as a group, as the conversion to HSV requires all 3 colors.


Here are the manual colors converted to HSV + RGB representations:

âœ³=(apply
   conj
   [:table [:thead [:th "color"] [:th "H"] [:th "S"] [:th "V"]
            [:th ""] [:th "R"] [:th "G"] [:th "B"]]]
   (map (fn [c]
          (let [[h s v] (clj2d-color/to-HSV* (clj2d-color/color c))
                [r g b] (clj2d-color/color c)]
            [:tr
             [:td {:style (garden/style {:background-color c})}]

             [:td (Math/round h)] [:td (Math/round s)] [:td (Math/round v)]
             [:td ""]
             [:td (Math/round r)] [:td (Math/round g)] [:td (Math/round b)]]))
        carpente-manual-colors))ðŸ”š

âœ³(def carpente-hsv-tens (colors/bgr-img->hsv carpente-tens))  ðŸ”š

âœ³= [:div [:b "Some of the HSV pixel results"]
  (apply conj [:table
               [:thead
                [:th "color"]
                [:th "X"] [:th "Y"]
                [:th "R"] [:th "G"] [:th "B"]
                [:th "H"] [:th "S"] [:th "V"] ]]
         (->> (let [[y x _] (:shape (.dimensions carpente-tens))]
                (map vector
                     (take 15 (shuffle (range x)))
                     (take 15 (shuffle (range y)))))
              (map (fn [[x y]] [x y
                                (carpente-tens y x)
                                (carpente-hsv-tens y x)]))
              (map
               (fn [[x y [b g r] [h s v]]]
                 [:tr
                  [:td
                   {:style
                    (garden/style
                     {:background-color
                      (clj2d-color/format-hex
                       (clj2d-color/from-RGB* [r g b]))})}]
                  [:td x] [:td y]
                  [:td r] [:td g] [:td b]
                  [:td h] [:td s] [:td v]
                  ]))))] ðŸ”š

âœ³(def hsv-dataset
  (let [[y x z] (dtype/shape carpente-hsv-tens)
        pixels (tensor/reshape carpente-hsv-tens [(* y x) z])
        pixels-ds (-> pixels
                      (tensor->dataset "Carpente HSV colors")
                      (ds/rename-columns [:hue :saturation :value]))
        pixels-aggregated
        (-> pixels-ds
            (api/update-columns
             [:hue :saturation :value]
             #(dtype-fn/* 4 (dtype-fn/round (dtype-fn// % 4))))
            (api/group-by [:hue :saturation :value])
            (api/aggregate {:hue #(first (% :hue))
                            :saturation #(first (% :saturation))
                            :value #(first (% :value))
                            :count api/row-count}))]
    (api/map-columns
     pixels-aggregated
     :hex [:hue :saturation :value]
     (fn [h s v] (clj2d-color/format-hex
                  (clj2d-color/from-HSV* [h s v]))))

    ))ðŸ”š

âœ³(def hs-dataset
  (let [[y x z] (dtype/shape carpente-hsv-tens)
        pixels (tensor/reshape carpente-hsv-tens [(* y x) z])
        pixels-ds
        (-> pixels
            (tensor->dataset "Carpente HSV colors")
            (ds/rename-columns [:hue :saturation :value])
            (api/map-columns
             :hex [:hue :saturation :value]
             (fn [h s v]
               (clj2d-color/format-hex
                (clj2d-color/from-HSV* [h s v])))))]
    (-> pixels-ds
        (api/update-columns
         [:hue :saturation]
         #(dtype-fn/* 4 (dtype-fn/round (dtype-fn// % 4))))
        (api/group-by [:hue :saturation])
        (api/aggregate {:hue #(first (% :hue))
                        :saturation #(first (% :saturation))
                        :count api/row-count
                        :hex #(first (% :hex))}))))ðŸ”š

âœ³(def hv-dataset
  (let [[y x z] (dtype/shape carpente-hsv-tens)
        pixels (tensor/reshape carpente-hsv-tens [(* y x) z])
        pixels-ds
        (-> pixels
            (tensor->dataset "Carpente HSV colors")
            (ds/rename-columns [:hue :saturation :value])
            (api/map-columns
             :hex [:hue :saturation :value]
             (fn [h s v]
               (clj2d-color/format-hex
                (clj2d-color/from-HSV* [h s v])))))]
    (-> pixels-ds
        (api/update-columns
         [:hue :value]
         #(dtype-fn/* 4 (dtype-fn/round (dtype-fn// % 4))))
        (api/group-by [:hue :value])
        (api/aggregate {:hue #(first (% :hue))
                        :value #(first (% :value))
                        :count api/row-count
                        :hex #(first (% :hex))}))))ðŸ”š



âœ³= (let
       [hist-edn
        {:data {:values (api/rows hs-dataset :as-maps)}
         :width 800 :height 800
         :title "Density of hue and saturation"
         :spacing 15
         :bounds :flush
         :vconcat [{:mark :bar :width 550
                    :height 100
                    :encoding {:x {:bin {:step 4 :base 2}
                                   :field :hue :axis nil}
                               :y {:aggregate :count :title ""}
                               :color {:field :hex :scale nil
                                       :type :nominal}}}
                   {:spacing 15 :bounds :flush
                    :hconcat
                    [{:mark :rect
                      :width 550 :height 550
                      :encoding {:x {:bin  {:step 4 :base 2}
                                     :field :hue}
                                 :y {:bin   {:step 4 :base 2}
                                     :field :saturation}
                                 :color {:field :hex :scale nil
                                         :type :nominal}
                                 :alpha {:aggregate :sum}}}
                     {:mark :bar :width 100 :height 550
                      :encoding {:y {:bin {:step 4 :base 2}
                                     :field :saturation
                                     :axis nil}
                                 :color {:field :hex :scale nil
                                         :type :nominal}
                                 :x {:aggregate :count :title ""}}}]}]
         :config {:view {:stroke :transparent}
                  :axis {:labelFont "Default Sans"
                         :titleFont "Default Sans"
                         :titleFontSize 16
                         :labelFontSize 14}
                  :title {:font "Default Sans"
                          :fontSize 24}}}]
   (plot-edn->svg hist-edn)
       ) ðŸ”š

âœ³= (plot-edn->svg
   {:data {:values (api/rows hv-dataset :as-maps)}
    :width 800 :height 800
    :title "Density of hue and value"
    :spacing 15
    :bounds :flush
    :vconcat [{:mark :bar :width 550
               :height 100
               :encoding {:x {:bin {:step 4 :base 2}
                              :field :hue :axis nil}
                          :y {:aggregate :count :title ""}
                          :color {:field :hex :scale nil
                                  :type :nominal}}}
              {:spacing 15 :bounds :flush
               :hconcat
               [{:mark :rect
                 :width 550 :height 550
                 :encoding {:x {:bin  {:step 4 :base 2}
                                :field :hue}
                            :y {:bin  {:step 4 :base 2}
                                :field :value}
                            :color {:field :hex :scale nil
                                    :type :nominal}
                            :alpha {:aggregate :sum}}}
                {:mark :bar :width 100 :height 550
                 :encoding {:y {:bin {:step 4 :base 2}
                                :field :value
                                :axis nil}
                            :color {:field :hex :scale nil
                                    :type :nominal}
                            :x {:aggregate :count :title ""}}}]}]
    :config {:view {:stroke :transparent}
             :axis {:labelFont "Default Sans"
                    :titleFont "Default Sans"
                    :titleFontSize 16
                    :labelFontSize 14}
             :title {:font "Default Sans"
                     :fontSize 24}}}
       ) ðŸ”š


âœ³=[:h4 "Ideas"]ðŸ”š
We can bin the colors by relative luminance and then compute pairwise contrast ratios, or get the most common colors for a given RL threshold, or any number of other data-driven ways of slicing up the image. "Clamping" the colors to the histogram bins makes the visualization process a bit more robust to small variations in color.

âœ³=[:h2 "Measuring the representativeness of a color"]ðŸ”š

âœ³=[:figure
   [:blockquote
    "The problem of 1-D k-means clustering is defined as assigning elements of the input 1-D array into k clusters so that the sum of squares of within-cluster distances from each element to its corresponding cluster mean is minimized."]
 [:figcaption "Haizhou Wang & Mingzhou Song, "
  [:a {:href "https://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf"}
   [:em "Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic Programming"]]]]ðŸ”š

This technique lends itself best to the problem of identifying the representative hues of an image. Fastmath has an implementation of x-means clustering, which uses a Bayesian information criterion to test for convergence.

One clustering method: 2d clustering on hue and saturation, combined with 1d clustering on value for different shades of the representative colors:

âœ³=

(let [hs-clst (-> (map vector
                       (api/->array hsv-dataset :hue)
                       (api/->array hsv-dataset :saturation))
                  (cluster/x-means 8)
                  cluster/regroup)
      v-clst (-> hsv-dataset
                 (api/->array :value)
                 (cluster/x-means 8)
                 cluster/regroup)]
  (apply conj
         [:table {:style (garden/style {:line-height "1em"})}
          [:thead [:tr [:th ""]
                   [:th 1 ] [:th 2 ] [:th 3 ] [:th 4 ]
                   [:th 5 ] [:th 6 ] [:th 7 ] [:th 8 ]]]]
         (for [v (sort > (map #(first (:representative %)) v-clst))]
           (apply conj [:tr [:th (str (Math/round v))]]
                  (for [[h s] (map :representative hs-clst)]
                    [:td {:style
                          (garden/style
                           {:background-color
                            (clj2d-color/format-hex
                             (clj2d-color/from-HSV* [h s v]))})}]
                    ))))

  )  ðŸ”š

Another method: 2d clustering on value and saturation, combined with 1d clustering on hue:

âœ³=

(let [vs-clst (-> (map vector
                       (api/->array hsv-dataset :value)
                       (api/->array hsv-dataset :saturation))
                  (cluster/x-means 8)
                  cluster/regroup)
      h-clst (-> hsv-dataset
                 (api/->array :value)
                 (cluster/x-means 8)
                 cluster/regroup)]
  (apply conj
         [:table {:style (garden/style {:line-height "1em"})}
          [:thead [:tr [:th ""]
                   [:th 1 ] [:th 2 ] [:th 3 ] [:th 4 ]
                   [:th 5 ] [:th 6 ] [:th 7 ] [:th 8 ]]]]
         (for [h (sort > (map #(first (:representative %)) h-clst))]
           (apply conj [:tr [:th (str (Math/round h))]]
                  (for [[v s] (map :representative vs-clst)]
                    [:td {:style
                          (garden/style
                           {:background-color
                            (clj2d-color/format-hex
                             (clj2d-color/from-HSV* [h s v]))})}]
                    )))))  ðŸ”š

âœ³=[:h3 "Clustering as method of reducing the search space"]ðŸ”š

The above methods can yield colors that aren't actually present in the image. A larger number of initial clusters gives a larger 'palette' to work from, which can be filtered down to a smaller group based on contrast ratios between the colors.

âœ³(def hsv-clusters-24
  (let [hsv-data
        (mapv vector
              (api/->array hsv-dataset :hue)
              (api/->array hsv-dataset :saturation)
              (api/->array hsv-dataset :value))
        cluster-fns [#(cluster/x-means % 24)
                    #_ #(cluster/denclue % 4 24)
                    #_ #(cluster/spectral % 24 4)]]
    (into {} (for [c-fn cluster-fns]
               (let [clust (c-fn hsv-data)]
                 [(:type clust) clust]))))) ðŸ”š


A cluster of 24 colors can be compared pairwise in a table to see all the contrast ratios between them:

âœ³(defn pairwise-cluster-table [cluster]
  (let [hex-colors
        (->>
         (:representatives cluster)
         (map #(map (fn [i] (Math/round i)) %))
         sort
         (map (fn [c]
                (-> c
                    (clj2d-color/from-HSV*)
                    (clj2d-color/format-hex)))))]
  (apply conj
         [:table {:style (garden/style {:line-height "0.7em"
                                        :font-size "0.7em"})}
          [:thead
           (apply
            conj [:tr [:td ]]
            (map (fn [c] [:td {:style (garden/style {:background-color c})}]) hex-colors))]]
         (for [c1 hex-colors]
           (apply conj
                  [:tr [:td {:style (garden/style {:background-color c1})}]]
                  (for [c2 hex-colors]
                    [:td
                     (Math/round
                             (clj2d-color/delta-c (clj2d-color/color c1)
                                                  (clj2d-color/color c2)))]))))))ðŸ”š

âœ³= (pairwise-cluster-table (:x-means hsv-clusters-24))ðŸ”š

Trying again with density clustering:

âœ³ (def hsv-clusters-denclu-24
   (-> (map vector
            (api/->array hsv-dataset :hue)
            (api/->array hsv-dataset :saturation)
            (api/->array hsv-dataset :value))
       (cluster/denclue 4 24)
       cluster/regroup))ðŸ”š

âœ³= (pairwise-cluster-table (:denclue hsv-clusters-24))ðŸ”š

Informal inspection seems to indicate that density clustering and x-means appear to converge on the same colors. It would likely be better to formalize the comparison, as then the choice of clustering method and parameters could be automated through grid search techniques (for example, to find the fastest approximation).

âœ³=[:h3 "Assignment of weights to color channels"]ðŸ”š



âœ³=[:h2 "Defining the objective function"]ðŸ”š

I will need to optimize over both of these constraints simultaneously.
