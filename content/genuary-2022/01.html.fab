 âœ³(ns respatialized.genuary.2022.01
  (:require [clojure2d.core :as clj2d]
            [hiccup.core :refer [html]]
            [respatialized.fractals :as fractals]
            [site.fabricate.prototype.page :refer :all]
            [malli.core :as m]
            [fastmath.random :as random]
            [fastmath.vector :as v]
            [thi.ng.math.core :as mth]
            [thi.ng.geom.core :as geom]
            [thi.ng.geom.viz.core :as viz]
            [thi.ng.geom.vector :as vec]
            [thi.ng.geom.svg.core :as svg]
            [fastmath.core :as math]
            [fastmath.random :as random]
            [fastmath.stats :as stats]
            [garden.core :as garden])) ðŸ”š

âœ³ (def metadata {:title "Genuary 2022.01"}) ðŸ”š

âœ³=[:h1 (:title metadata)]ðŸ”š
âœ³=[:h2 "Prompt: draw 10,000 of something."]ðŸ”š



âœ³ (def path-str "M 0 8 L 0 3 L 3 3 L 8 8 Z") ðŸ”š

âœ³=[:h2 "10,000 marks"]ðŸ”š

âœ³= (let [w (+ 800 20)
          h (* w 1.6)]
     (into [:svg {:width w :height h
                  :viewBox (str "0 0 " w " " h)}]
           (for [x (math/slice-range 10 (- w 10) 80)
                 y (math/slice-range 10 (- h 10) 125)]
             [:path {:transform (str "translate(" x "," y ")")
                     :fill "black" :stroke "none" :stroke-width 2
                     :d path-str}]))) ðŸ”š


âœ³=[:h2 "10,000 circles drawn from a Pareto distribution"]ðŸ”š
âœ³=[:h3 "Iteration 1"]ðŸ”š

âœ³(def circle-distribution (random/distribution :pareto {:scale 1.1 :shape 1.0}))ðŸ”š


âœ³= (let [radius 250
         coordinates
         (for [theta (math/slice-range 0 math/TWO_PI 125)
               r (math/slice-range 0 350 80)]
           (v/from-polar (v/vec2 r theta)))]
   (into [:svg {:viewBox "0 0 800 800" :width 800 :height 800}]
         (map (fn [[x y]] [:circle {:cx x :cy y :r
                                    (math/* radius (random/sample circle-distribution))
                                    :fill "none" :stroke-opacity 0.5 :stroke "black"
                                    }]) coordinates))
     ) ðŸ”š

âœ³=[:h3 "Iteration 2"]ðŸ”š


âœ³(def circle-distribution-2 (random/distribution :pareto {:scale 0.66 :shape 1.4}))ðŸ”š


âœ³(def circle-dist-2-sample
  (let [radius 1.0 c 0.3]
    (for [_ (range 10001 )]
      (+ c (* radius (random/sample circle-distribution-2)))))) ðŸ”š

âœ³= (let [radius 1.0
          c 0.3
          coordinates
         (for [r (math/slice-range 50 340 50)
                theta (math/slice-range 1.03 (+ 1.0 math/TWO_PI) 200)]
           (v/from-polar (v/vec2 r theta)))]
   (into [:svg {:viewBox "0 0 800 800" :width 800 :height 800}]
         (map (fn [[x y] r]
                [:circle {:cx (+ 400 x) :cy (+ 400 y)
                          :r r  :fill "none"
                          :stroke-width 1.5
                          :stroke-opacity 0.5 :stroke "black"}])
              coordinates
              (sort circle-dist-2-sample)))) ðŸ”š

Histogram of radius sizes:

âœ³ (def circle-hist (:bins (stats/histogram circle-dist-2-sample 20))) ðŸ”š

âœ³(defn bar-spec
  [num width]
  (fn [idx col]
    {:values     circle-hist
     :attribs    {:stroke       col
                  :stroke-width (str (dec width) "px")}
     :layout     viz/svg-bar-plot
     :interleave num
     :bar-width  width
     :offset     idx}))ðŸ”š

âœ³(def viz-spec
  {:x-axis (viz/linear-axis
            {:domain [(apply min circle-dist-2-sample)
                      (apply max circle-dist-2-sample)]
             :range  [50 580]
             :major  100
             :minor 25
             :pos    280
             :label  (viz/default-svg-label int)})
   :y-axis (viz/log-axis
            {:domain   [0 10001]
             :range       [280 20]
             ;; :major       1000
             ;; :minor       250
             :pos         50
             :label-dist  15
             :label-style {:text-anchor "end"}})
   :grid   {:minor-y false}}) ðŸ”š


âœ³=(-> viz-spec
      (assoc :data [((bar-spec 1 16) 0 "#000")] )
      (viz/svg-plot2d-cartesian)
      (#(svg/svg {:width 700 :height 320} %))
      html) ðŸ”š

âœ³=[:h2 "10,000 points"]ðŸ”š
âœ³=[:h3 "Iteration 1: de Jong attractor in polar coordinates"]ðŸ”š


âœ³(def iteration-1 (iterate (de-jong 1.32 2.23 0.05 2.13) [0.0 0.0]))ðŸ”š


âœ³=(->> iteration-1
(take 10000)
(map (fn [[x y]]
(let [[x y] (v/from-polar (v/vec2 x y))]
[:circle {:cx (+ 400 (* 200 x)) :cy (+ 400 (* 200 y)) :r 1.2 :stroke "none" :fill-opacity 0.3}])))
(into [:svg {:viewBox "0 0 800 800" :width 800 :height 800}]))ðŸ”š
