âœ³=(ns respatialized.writing.fabricate-wishlist)ğŸ”š

âœ³(def metadata {:title "Fabricate: wishlist"
:written #inst "2022-04-04"})ğŸ”š

âœ³=[:h1 (:title metadata)]ğŸ”š

This page contains a running list of the "nice to haves" I've hoped for while using Fabricate to generate pages.

âœ³=[:h4 "Intelligent linking to internal pages"]ğŸ”š

Links between pages should be more "durable" and should be tested for validity.


âœ³=[:h4 "Pulling metadata from external pages"]ğŸ”š

When linking to an external page, the link can be enriched by pulling  âœ³=[:a {:href "https://ogp.me/"} "opengraph"]ğŸ”š information from that page at render time.

âœ³=[:h4 "Datetime utils"]ğŸ”š

There should be easier ways of associating metadata like time with parts of a page.


âœ³=[:h4 "Test suite for image alt text + other metadata"]ğŸ”š

Accessibility testing can be done continuously.

âœ³=[:h4 "Memoization of page namespaces"]ğŸ”š

Similar to the way Clerk uses âœ³=[:code "tools.analyzer"]ğŸ”š to only re-evaluate what it it needs to, page rendering can be sped up if vars haven't changed since the last evaluation.


âœ³=[:h4 "Auto-formatting of " [:code "style"] " attributes"]ğŸ”š

It seems like an antipattern to keep using âœ³=[:code "(garden/style {:background-color \"#FFFFFF\"})"]ğŸ”š all over the place instead of keeping that information with the element as data.

âœ³=[:h4 "An " [:code "image"] " function"]ğŸ”š

Including an image should automatically trigger optimizations like conversion to an efficent resolution and file format. When a database is added, images can be stored there in a CMS-like fashion.

âœ³=[:h4 "A default pretty-printer/formatter for basic Clojure forms"]ğŸ”š

Example code should be data and handled intelligently.

âœ³=[:h4 "Timing of page evaluation"]ğŸ”š

Similar to the way Clerk prints re-evaluation time.
